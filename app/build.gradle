apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.android.example.github.testing.OpenClass'
}
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.szbm.wh.x.bmlogg"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.android.example.github.util.GithubTestRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.fragment_ui_ktx
    implementation deps.room.runtime
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.glide.runtime

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    implementation deps.constraint_layout
    implementation deps.kotlin.stdlib

    implementation deps.timber

    implementation 'androidx.legacy:legacy-support-v4:1.0.0-alpha1'
    implementation 'com.google.android.material:material:1.0.0-alpha1'
    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-alpha1'
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    kapt deps.room.compiler
    kapt deps.lifecycle.compiler

    testImplementation deps.junit
    testImplementation deps.mock_web_server
    testImplementation deps.arch_core.testing
    testImplementation deps.mockito.core

    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules

    androidTestImplementation deps.navigation.testing_ktx
    androidTestImplementation deps.support.app_compat
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.cardview
    androidTestImplementation deps.support.design

    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib

    androidTestImplementation deps.arch_core.testing
    androidTestImplementation deps.mockito.core
    androidTestImplementation deps.mockito.android
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}
